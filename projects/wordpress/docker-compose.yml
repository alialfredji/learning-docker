
# Learning Docker
# by @thepeg
# https://github.com/marcopeg/learning-docker

# setup a Wordpress development environment

version: '2'
services:

#################
# Data Services #
#################

    # collect
    storage:
        image: busybox:latest
        volumes:
            - ./data/mysql:/var/lib/mysql
            - ./wp-content/uploads:/var/www/html/wp-content/uploads
            - ./wp-content/plugins:/var/www/html/wp-content/plugins
            - ./wp-content/themes:/var/www/html/wp-content/themes
            - ./libs/node:/usr/src/app/lib
            - ./data/node_modules:/usr/src/app/node_modules

    mysql:
        image: mysql:latest
        environment:
            MYSQL_ROOT_PASSWORD: root
        volumes_from:
            - storage

    redis:
        image: redis:latest

    rabbitmq:
        image: rabbitmq:latest







################
# APPLICATIONS #
################

    # custom wordpress image - good for development
    wordpress:
        build: ./services/wordpress
        links:
            - mysql:mysql
        environment:
            WORDPRESS_DB_PASSWORD: root
        volumes_from:
            - storage
        depends_on:
            - mysql

    # node app which exposes an interface to start the caching process of
    # all the posts published by the wordpress instance
    cache_posts_list:
        build: ./services/node
        links:
            - redis:redis
            - wordpress:wordpress
            - rabbitmq:rabbitmq
        depends_on:
            - wordpress
            - redis
            - rabbitmq
        environment:
            NODE_ENV: development
        volumes_from:
            - storage
        volumes:
            - ./apps/cache_posts_list:/usr/src/app

    # node app which listen to rabbitmq, pull from wordpress
    # and push to redis
    cache_single_post:
        build: ./services/node
        links:
            - redis:redis
            - wordpress:wordpress
            - rabbitmq:rabbitmq
        depends_on:
            - wordpress
            - redis
            - rabbitmq
        environment:
            NODE_ENV: development
        volumes_from:
            - storage
        volumes:
            - ./apps/cache_single_post:/usr/src/app





#########################
# Development Utilities #
#########################

    # database utility
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        links:
            - mysql:db
        environment:
            PMA_USER: root
            PMA_PASSWORD: root
            PHP_UPLOAD_MAX_FILESIZE: 999999999
        depends_on:
            - mysql

    redis_commander:
        build: ./services/redis-ui
        links:
            - redis:redis





##################
# Frontent NGiNX #
##################

    # reverse proxy to the services we want to expose to the host
    # by default all the services are hidden behind Docker's layer
    nginx:
        image: nginx:latest
        ports:
            - 80:80
            - 8081:8081
        links:
            - phpmyadmin:phpmyadmin
            - wordpress:wordpress
            - redis_commander:redis_commander
            - cache_posts_list:cache_posts_list
        volumes:
            - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
